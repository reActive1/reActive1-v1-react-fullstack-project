{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/Form.js\";\nimport React, { useState } from 'react';\nimport { Exercises } from \"../Common/Enums\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Dropdown } from 'semantic-ui-react';\nimport { getRandomExercise } from './RandomExercise';\nimport { timeOptions } from \"../Common/Enums\";\nimport { timeRepeat } from \"../Common/Enums\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleRand = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: getRandomExercise(getRandomExercise(Exercises))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.randomFunctionHandler = e => {\n      e.preventDefault();\n      /* First way to show*/\n      //  setRandomExercise(selectedRandom = getRandomExercise(getRandomExercise(E1))); \n      // this.setState({selectedRandom:  {getRandomExercise(getRandomExercise(Exercises))} })\n      //   var rand_val = () => {return(\n      //   <div>\n      //     {getRandomExercise(getRandomExercise(Exercises))}\n      //   </div>\n      // );}\n      // this.setState({selectedRandom: {this.handleRand} })\n\n      this.setState({\n        selectedRandom: () => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getRandomExercise(getRandomExercise(Exercises))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 5\n          }, this);\n        }\n      }); // setRandomExercise(selectedRandom = () => {\n      //     return(\n      //         <div>\n      //             {getRandomExercise(getRandomExercise(Exercises))}\n      //         </div>\n      //     )\n      // });\n    };\n\n    this.filterExercise = (e, data) => {\n      console.log(e.value);\n      var current_dropdown = [];\n\n      for (var key in this.state.current_exercises_key[this.state.myArray[e.value]]) {\n        Object.keys(this.state.current_exercises_key[this.state.myArray[e.value]][key]).forEach(item => {\n          current_dropdown.push({\n            key: item,\n            text: item,\n            value: item\n          });\n        });\n      }\n\n      this.setState({\n        current_exercise: current_dropdown\n      });\n    };\n\n    this.sumbitExerciseHandler = e => {\n      e.preventDefault();\n      this.state.choosen_exercises_array.push(this.state.exercise_item); // console.log(this.state.choosen_exercises_array)\n      // this.props.setInputText(this.state.exercise_item)\n    };\n\n    var ex = Object.keys(Exercises).map(key => {\n      var obj = {};\n      obj[key] = Exercises[key];\n      return obj;\n    });\n    var res = [];\n\n    for (var i in ex) {\n      for (var _key in ex[i]) {\n        Object.keys(ex[i][_key]).forEach(item => {\n          res.push({\n            key: item,\n            text: item,\n            value: item\n          });\n        });\n      }\n    }\n\n    var Types_of_exercises = [{\n      key: 'Back exercises',\n      text: 'Back exercises',\n      value: 'Back exercises'\n    }, {\n      key: 'Legs exercises',\n      text: 'Legs exercises',\n      value: 'Legs exercises'\n    }, {\n      key: 'Abs exercisesbs',\n      text: 'Abs exercisesbs',\n      value: 'Abs exercisesbs'\n    }, {\n      key: 'Shoulders exercises',\n      text: 'Shoulders exercises',\n      value: 'Shoulders exercises'\n    }, {\n      key: 'FullBody exercises',\n      text: 'FullBody exercises',\n      value: 'FullBody exercises'\n    }];\n    var myArray = {\n      \"Total\": 10,\n      \"Back exercises\": 0,\n      \"Legs exercises\": 1,\n      \"Abs exercisesbs\": 3,\n      \"Shoulders exercises\": 4,\n      \"FullBody exercises\": 5,\n      \"Chest exercises\": 6\n    };\n    this.state = {\n      current_exercise: res,\n      current_exercises_key: ex,\n      myArray: myArray,\n      Types_of_exercises: Types_of_exercises,\n      exercise_item: [],\n      choosen_exercises_array: [],\n      selectedRandom: \"\"\n    };\n  } //   const randomFunctionHandler = (e) => {\n  //     e.preventDefault();\n  //   /* First way to show*/\n  //   //  setRandomExercise(selectedRandom = getRandomExercise(getRandomExercise(E1))); \n  //     setRandomExercise(selectedRandom = () => {\n  //         return(\n  //             <div>\n  //                 {getRandomExercise(getRandomExercise(E1))}\n  //             </div>\n  //         )\n  //     });\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.randomFunctionHandler,\n            className: \"random-exercise-button\",\n            children: \" Start random exercise!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 18\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select exrecise type\",\n          fluid: true,\n          selection: true,\n          onChange: (event, data) => {\n            console.log(data.value);\n            {\n              this.filterExercise(data);\n            }\n          },\n          options: this.state.Types_of_exercises\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select exrecise\",\n          fluid: true,\n          search: true,\n          selection: true,\n          onChange: (event, data) => {\n            this.state.exercise_item.push({\n              exrecise: data.value\n            });\n          },\n          options: this.state.current_exercise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select time\",\n          fluid: true,\n          search: true,\n          selection: true,\n          onChange: (event, data) => {\n            this.state.exercise_item.push({\n              time: data.value\n            });\n          },\n          options: timeOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          placeholder: \"Select repeats\",\n          fluid: true,\n          search: true,\n          selection: true,\n          onChange: (event, data) => {\n            this.state.exercise_item.push({\n              repeats: data.value\n            });\n          },\n          options: timeOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.sumbitExerciseHandler,\n          className: \"exercise-button\",\n          type: \"submit\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-plus-square\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/Form.js"],"names":["React","useState","Exercises","Dropdown","getRandomExercise","timeOptions","timeRepeat","Form","Component","constructor","props","handleRand","randomFunctionHandler","e","preventDefault","setState","selectedRandom","filterExercise","data","console","log","value","current_dropdown","key","state","current_exercises_key","myArray","Object","keys","forEach","item","push","text","current_exercise","sumbitExerciseHandler","choosen_exercises_array","exercise_item","ex","map","obj","res","i","Types_of_exercises","render","event","exrecise","time","repeats"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {Exercises} from \"../Common/Enums\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Dropdown } from 'semantic-ui-react'\nimport {getRandomExercise} from './RandomExercise'\nimport  {timeOptions}  from \"../Common/Enums\"\nimport  {timeRepeat}  from \"../Common/Enums\"\n\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    var ex = Object.keys(Exercises).map((key)=>{\n        var obj = {};\n        obj[key] = Exercises[key];\n        \n        return obj;\n        \n            });          \n    var res = [];\n    for (var i in ex){\n        for (var key in ex[i])\n        {\n            Object.keys(ex[i][key]).forEach(item =>{\n                res.push({\n                    key: item,\n                    text: item,\n                    value: item\n                });\n            }) \n        }\n    }\n\n\n\n    var Types_of_exercises = [{\n        key: 'Back exercises',\n        text: 'Back exercises',\n        value: 'Back exercises',\n      },\n      {\n        key: 'Legs exercises',\n        text: 'Legs exercises',\n        value: 'Legs exercises',\n      },\n      {\n        key: 'Abs exercisesbs',\n        text: 'Abs exercisesbs',\n        value: 'Abs exercisesbs',\n      },{\n        key: 'Shoulders exercises',\n        text: 'Shoulders exercises',\n        value: 'Shoulders exercises',\n      },\n      {\n        key: 'FullBody exercises',\n        text: 'FullBody exercises',\n        value: 'FullBody exercises',\n      },]\n      var myArray = {\"Total\":10,\"Back exercises\": 0, \"Legs exercises\": 1, \"Abs exercisesbs\": 3,\"Shoulders exercises\": 4,\"FullBody exercises\": 5, \"Chest exercises\":6};\n      this.state = {\n        current_exercise: res ,\n        current_exercises_key: ex ,\n        myArray: myArray,\n        Types_of_exercises:Types_of_exercises,\n        exercise_item : [],\n        choosen_exercises_array:[],\n        selectedRandom:\"\",\n      };\n\n\n  }\n\n//   const randomFunctionHandler = (e) => {\n//     e.preventDefault();\n//   /* First way to show*/\n//   //  setRandomExercise(selectedRandom = getRandomExercise(getRandomExercise(E1))); \n//     setRandomExercise(selectedRandom = () => {\n//         return(\n//             <div>\n//                 {getRandomExercise(getRandomExercise(E1))}\n//             </div>\n//         )\n//     });\n// }\n\nhandleRand = () =>{\n  return(\n            <div>\n                {getRandomExercise(getRandomExercise(Exercises))}\n            </div>\n        )\n}\n\n  randomFunctionHandler = (e) => {\n    e.preventDefault();\n  /* First way to show*/\n  //  setRandomExercise(selectedRandom = getRandomExercise(getRandomExercise(E1))); \n  // this.setState({selectedRandom:  {getRandomExercise(getRandomExercise(Exercises))} })\n  //   var rand_val = () => {return(\n  //   <div>\n  //     {getRandomExercise(getRandomExercise(Exercises))}\n  //   </div>\n  // );}\n  \n  // this.setState({selectedRandom: {this.handleRand} })\n  this.setState({selectedRandom:   ( () => {return(\n    <div>\n        {getRandomExercise(getRandomExercise(Exercises))}\n    </div>\n)\n })\n})\n \n    // setRandomExercise(selectedRandom = () => {\n    //     return(\n    //         <div>\n    //             {getRandomExercise(getRandomExercise(Exercises))}\n    //         </div>\n    //     )\n    // });\n}\n  \n  filterExercise = (e,data) =>{\n    console.log(e.value);\n    var current_dropdown=[];\n    for (var key in this.state.current_exercises_key[this.state.myArray[e.value]])\n    {\n        Object.keys(this.state.current_exercises_key[this.state.myArray[e.value]][key]).forEach(item =>{\n          current_dropdown.push({\n                key: item,\n                text: item,\n                value: item\n            });\n        }) \n    }\n    this.setState({current_exercise:current_dropdown})\n  }\n\n  sumbitExerciseHandler = (e) => {\n    e.preventDefault();\n    this.state.choosen_exercises_array.push(this.state.exercise_item)\n    // console.log(this.state.choosen_exercises_array)\n    // this.props.setInputText(this.state.exercise_item)\n    \n  \n}\n\n  \n  render() {\n    return (\n        <form>\n        <div>\n            <div><button onClick={this.randomFunctionHandler} className=\"random-exercise-button\"> Start random exercise!</button></div>\n\n            <Dropdown\n              placeholder='Select exrecise type'\n              fluid\n              selection\n              onChange={(event, data) => {\n                console.log(data.value);\n                {this.filterExercise(data)}\n            }\n          }\n              options={this.state.Types_of_exercises}\n                />\n\n              <Dropdown\n              placeholder='Select exrecise'\n              fluid\n              search\n              selection\n              onChange={(event,data)=>{\n                this.state.exercise_item.push({exrecise:data.value})\n              }}\n              options={this.state.current_exercise}\n                />\n                <Dropdown\n              placeholder='Select time'\n              fluid\n              search\n              selection\n              onChange={(event,data)=>{\n                this.state.exercise_item.push({time:data.value})\n              }}\n              options={timeOptions}\n                />\n            <Dropdown\n              placeholder='Select repeats'\n              fluid\n              search\n              selection\n              onChange={(event,data)=>{\n                this.state.exercise_item.push({repeats:data.value})\n              }}\n              options={timeOptions}\n                />\n\n                <button onClick={this.sumbitExerciseHandler} className=\"exercise-button\" type=\"submit\">\n                    <i className=\"fas fa-plus-square\"></i>\n                </button>         \n            </div>\n            {/* {selectedRandom} */}\n         </form> \n\n    );\n  }\n}\n\nexport default Form;"]},"metadata":{},"sourceType":"module"}