{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/ExerciseList.js\";\nimport React from \"react\";\nimport Exercise from \"./ExerciseItem\";\nimport { Container, Row, Button } from \"shards-react\";\nimport { NavLink } from 'react-router-dom';\nimport { Label } from 'semantic-ui-react';\n\nconst ExerciseList = ({\n  choosenExercisesArray,\n  updateExercisesArray,\n  totalTrainingTime\n}) => {\n  const exercisesDurationInSec = () => {\n    let count = 0;\n    choosenExercisesArray.forEach(exercise => {\n      count += (exercise.time + exercise.restTime) * exercise.repeats;\n    });\n    return count;\n  };\n\n  const convertAndDisplaySec = timeInSec => {\n    let secDisplay = timeInSec % 60 === 0 ? \"00\" : timeInSec % 60;\n    let minDisplay = Math.trunc(timeInSec / 60) === 0 ? \"00\" : Math.trunc(timeInSec / 60);\n    let displayCount = `${minDisplay}:${secDisplay} minutes`;\n    return displayCount;\n  }; //consider removing one restTime from total count\n  //option to add a message of what diff in min:sec exists\n\n\n  const isExercisesDurationFitTotalTime = () => {\n    const expectedDiff = 0.05;\n    console.log(\"totalTrainingTimeInSec: \", totalTrainingTimeInSec);\n    console.log(\"totalExerciseDuration: \", totalExerciseDuration);\n    const actualDiff = totalTrainingTimeInSec - 1300;\n    let msgToShow = \"\";\n\n    if (actualDiff < 0) {\n      msgToShow = \"you've reached the training time.\";\n    } else if (actualDiff > 0) {\n      const timeLeftInMin = convertAndDisplaySec(actualDiff);\n      msgToShow = timeLeftInMin + \" left, don't be lazy ;)\";\n    }\n\n    return {\n      isDurationFitTime: Math.abs(actualDiff) <= totalTrainingTimeInSec * expectedDiff,\n      diff: actualDiff,\n      msgToShow\n    };\n  };\n\n  const totalTrainingTimeInSec = totalTrainingTime / 1000;\n  const totalExerciseDuration = exercisesDurationInSec();\n  const {\n    isDurationFitTime,\n    diff,\n    msgToShow\n  } = isExercisesDurationFitTotalTime();\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-4\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Training List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), choosenExercisesArray.map(exercise => /*#__PURE__*/_jsxDEV(Exercise, {\n      exercise: exercise,\n      choosenExercisesArray: choosenExercisesArray,\n      updateExercisesArray: updateExercisesArray\n    }, exercise.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(\"h6\", {\n        children: [\"Current duration with rest breaks: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 56\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: convertAndDisplaySec(totalExerciseDuration)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        to: {\n          pathname: `/Timer/`\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          pill: true,\n          theme: \"info\",\n          size: \"lg\",\n          disabled: !isDurationFitTime,\n          children: \"START TRAINING\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), !isDurationFitTime && /*#__PURE__*/_jsxDEV(Label, {\n        basic: true,\n        color: \"red\",\n        pointing: \"left\",\n        className: \"mt-3\",\n        inline: true,\n        children: msgToShow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ExerciseList;\nexport default ExerciseList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExerciseList\");","map":{"version":3,"sources":["/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/ExerciseList.js"],"names":["React","Exercise","Container","Row","Button","NavLink","Label","ExerciseList","choosenExercisesArray","updateExercisesArray","totalTrainingTime","exercisesDurationInSec","count","forEach","exercise","time","restTime","repeats","convertAndDisplaySec","timeInSec","secDisplay","minDisplay","Math","trunc","displayCount","isExercisesDurationFitTotalTime","expectedDiff","console","log","totalTrainingTimeInSec","totalExerciseDuration","actualDiff","msgToShow","timeLeftInMin","isDurationFitTime","abs","diff","map","id","pathname"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Exercise from \"./ExerciseItem\";\nimport { Container, Row, Button } from \"shards-react\";\nimport {NavLink} from 'react-router-dom';\nimport { Label } from 'semantic-ui-react';\n\nconst ExerciseList = ( {choosenExercisesArray, updateExercisesArray, totalTrainingTime}) => {\n\n    const exercisesDurationInSec = () => {\n        let count = 0;\n        choosenExercisesArray.forEach((exercise) => {\n            count+= (exercise.time + exercise.restTime) * exercise.repeats;\n        })\n        return count;\n    }\n    \n    const convertAndDisplaySec = (timeInSec) => {\n        let secDisplay = timeInSec % 60 === 0 ? \"00\" : timeInSec % 60;\n        let minDisplay = Math.trunc(timeInSec/60) === 0 ? \"00\" : Math.trunc(timeInSec/60);\n        let displayCount = `${minDisplay}:${secDisplay} minutes`;\n        return displayCount;\n    }\n\n    //consider removing one restTime from total count\n    //option to add a message of what diff in min:sec exists\n    const isExercisesDurationFitTotalTime = () => {\n        const expectedDiff = 0.05;\n        console.log(\"totalTrainingTimeInSec: \", totalTrainingTimeInSec)\n        console.log(\"totalExerciseDuration: \", totalExerciseDuration)\n        const actualDiff = totalTrainingTimeInSec - 1300;\n        let msgToShow = \"\";\n        if (actualDiff < 0){\n            msgToShow = \"you've reached the training time.\";\n        }\n        else if (actualDiff > 0){\n            const timeLeftInMin = convertAndDisplaySec(actualDiff)\n            msgToShow = timeLeftInMin + \" left, don't be lazy ;)\";\n        }\n        return {\n                 isDurationFitTime: Math.abs(actualDiff) <= totalTrainingTimeInSec * expectedDiff,\n                 diff: actualDiff,\n                 msgToShow\n                };\n    }\n\n\n    const totalTrainingTimeInSec = totalTrainingTime / 1000;\n    const totalExerciseDuration = exercisesDurationInSec();\n    const {isDurationFitTime, diff, msgToShow} = isExercisesDurationFitTotalTime();\n\n    return(\n        <Container>\n            <Row className=\"py-4\">\n                <h1>Training List</h1>\n            </Row>\n            {choosenExercisesArray.map((exercise) => (\n                <Exercise \n                    exercise={exercise} \n                    choosenExercisesArray={choosenExercisesArray} \n                    updateExercisesArray={updateExercisesArray}\n                    key={exercise.id} />\n            ))}\n            <Row>\n                <h6>Current duration with rest breaks: <br /> \n                <strong>{convertAndDisplaySec(totalExerciseDuration)}</strong></h6>\n                {/* Option to display - Remaining time to total: */}\n            </Row>\n            <Row className=\"mt-3\">\n            <NavLink to = {{ pathname: `/Timer/` }}>\n                  <Button pill theme=\"info\" size=\"lg\" disabled={!isDurationFitTime}>START TRAINING</Button>\n            </NavLink>\n            {!isDurationFitTime && <Label basic color='red' pointing='left' className=\"mt-3\" inline>{msgToShow}</Label>}\n            </Row>\n        </Container>\n    );\n};\n\nexport default ExerciseList;"]},"metadata":{},"sourceType":"module"}