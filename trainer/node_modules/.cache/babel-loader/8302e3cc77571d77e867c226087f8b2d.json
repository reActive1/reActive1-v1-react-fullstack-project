{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./CssComponents/Timer.css\";\nimport Countdown, { zeroPad } from \"react-countdown\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n\nfunction Timer(props) {\n  _s();\n\n  let countdownApi = null;\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [time, setTime] = useState(Date.now() + props.time);\n\n  const setRef = countdown => {\n    if (countdown) {\n      countdownApi = countdown.getApi();\n    }\n  };\n\n  const handlePauseClick = () => {\n    console.log(countdownApi.time);\n    countdownApi && countdownApi.pause();\n  }; //total time countdown settings\n\n\n  const renderer = ({\n    hours,\n    minutes,\n    seconds,\n    completed\n  }) => {\n    if (completed) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"You rock! Training session ended!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [zeroPad(minutes), \":\", zeroPad(seconds)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 20\n      }, this);\n    }\n  }; //exercise time countdown settings\n\n\n  const renderTime = ({\n    remainingTime\n  }) => {\n    if (remainingTime === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: \"Great!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 16\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"Remaining\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"value\",\n        children: remainingTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text\",\n        children: \"seconds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timers\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(Countdown, {\n        date: time,\n        renderer: renderer,\n        ref: setRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n        isPlaying: isPlaying,\n        duration: props.time / 60 / 1000,\n        colors: [['#004777', 0.33], ['#F7B801', 0.33], ['#A30000', 0.33]],\n        children: renderTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsPlaying(false);\n          handlePauseClick();\n        },\n        children: \"pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setIsPlaying(true);\n        },\n        children: \"start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setTime(Date.now() + props.time);\n        },\n        children: \"restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Timer, \"R1G5O69tnkrk36Sxhipsa3u6wc8=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/Timer.js"],"names":["React","useState","Countdown","zeroPad","CountdownCircleTimer","Timer","props","countdownApi","isPlaying","setIsPlaying","time","setTime","Date","now","setRef","countdown","getApi","handlePauseClick","console","log","pause","renderer","hours","minutes","seconds","completed","renderTime","remainingTime"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport \"./CssComponents/Timer.css\";\nimport Countdown, {zeroPad} from \"react-countdown\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\n\nfunction Timer(props) {\n  let countdownApi = null;\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [time, setTime] = useState(Date.now()+props.time);\n\n  const setRef = countdown => {\n    if (countdown) {\n      countdownApi = countdown.getApi();\n    }\n  };\n\n    const handlePauseClick = () => {\n      console.log(countdownApi.time)\n      countdownApi && countdownApi.pause();\n    };\n\n    //total time countdown settings\n    const renderer = ({ hours, minutes, seconds, completed }) => {\n        if (completed) {\n            return <span>You rock! Training session ended!</span>;\n        } else {\n            return <span>{zeroPad(minutes)}:{zeroPad(seconds)}</span>\n        }\n    }\n\n    //exercise time countdown settings\n    const renderTime = ({ remainingTime }) => {\n      if (remainingTime === 0) {\n        return <div className=\"timer\">Great!</div>;\n      }\n      return (\n        <div className=\"timer\"> \n          <div className=\"text\">Remaining</div>\n          <div className=\"value\">{remainingTime}</div>\n          <div className=\"text\">seconds</div>\n        </div>\n      );\n    };\n\n    return (\n      <div className=\"timers\">\n        <h1><Countdown date={time} renderer={renderer} ref={setRef} /></h1>\n        <div className=\"timer-wrapper\">\n        <CountdownCircleTimer\n          isPlaying = {isPlaying}\n          duration={props.time/60/1000}\n          colors={[\n            ['#004777', 0.33],\n            ['#F7B801', 0.33],\n            ['#A30000', 0.33],\n          ]}\n        >\n          {renderTime}\n        </CountdownCircleTimer>\n        <button onClick = {() => {setIsPlaying(false); handlePauseClick();}}>\n          pause\n        </button>\n        <button onClick = {() => {setIsPlaying(true);}}>\n          start\n        </button>\n        <button onClick = {() => { setTime(Date.now()+props.time)}}>\n          restart\n        </button>\n        </div>\n      </div>\n    )\n}\n\nexport default Timer;"]},"metadata":{},"sourceType":"module"}