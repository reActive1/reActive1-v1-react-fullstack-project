{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/ChooseTotalTime.js\";\nimport React from \"react\";\nimport \"./CssComponents/ChooseTotalTime.css\";\nimport { Button } from \"semantic-ui-react\";\nimport Timer from './Timer';\nimport { GrCirclePlay } from \"react-icons/gr\";\n\nclass ChooseTotalTime extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.trainningTime = totalTime => {\n      this.setState({\n        totalDuration: totalTime * 60 * 1000,\n        isStarted: true\n      });\n    };\n\n    this.stopTraining = () => {\n      this.setState({\n        isStarted: false\n      });\n    };\n\n    this.state = {\n      isStarted: false,\n      totalDuration: 0,\n      isPlaying: false\n    };\n    this.trainningTime = this.trainningTime.bind(this);\n  }\n\n  render() {\n    if (!this.state.isStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TimeSelection\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Select training time (in minutes):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"yellow\",\n            onClick: () => this.trainningTime(20),\n            children: \"20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button.Or, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"orange\",\n            onClick: () => this.trainningTime(30),\n            children: \"30\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button.Or, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"red\",\n            onClick: () => this.trainningTime(40),\n            children: \"40\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.stopTraining\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Timer, {\n        time: this.state.totalDuration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default ChooseTotalTime;","map":{"version":3,"sources":["/Users/shiransteinberg/Documents/Projects/Trainer/trainer/src/Components/ChooseTotalTime.js"],"names":["React","Button","Timer","GrCirclePlay","ChooseTotalTime","Component","constructor","props","trainningTime","totalTime","setState","totalDuration","isStarted","stopTraining","state","isPlaying","bind","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,qCAAP;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,MAAMC,eAAN,SAA8BJ,KAAK,CAACK,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,aATmB,GASFC,SAAD,IAAe;AAC7B,WAAKC,QAAL,CAAc;AACZC,QAAAA,aAAa,EAAEF,SAAS,GAAG,EAAZ,GAAiB,IADpB;AAEZG,QAAAA,SAAS,EAAE;AAFC,OAAd;AAGD,KAbkB;;AAAA,SAgBnBC,YAhBmB,GAgBJ,MAAM;AACnB,WAAKH,QAAL,CAAc;AAACE,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACD,KAlBkB;;AAEjB,SAAKE,KAAL,GAAa;AACXF,MAAAA,SAAS,EAAE,KADA;AAEXD,MAAAA,aAAa,EAAE,CAFJ;AAGbI,MAAAA,SAAS,EAAE;AAHE,KAAb;AAIA,SAAKP,aAAL,GAAqB,KAAKA,aAAL,CAAmBQ,IAAnB,CAAwB,IAAxB,CAArB;AACD;;AAaDC,EAAAA,MAAM,GAAG;AACP,QAAG,CAAC,KAAKH,KAAL,CAAWF,SAAf,EAA0B;AACxB,0BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD,CAAQ,KAAR;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,QAAlB;AAA2B,YAAA,OAAO,EAAE,MAAM,KAAKJ,aAAL,CAAmB,EAAnB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD,CAAQ,EAAR;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,QAAlB;AAA2B,YAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,EAAnB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE,QAAC,MAAD,CAAQ,EAAR;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,KAAlB;AAAwB,YAAA,OAAO,EAAE,MAAM,KAAKA,aAAL,CAAmB,EAAnB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eASA;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKK;AAA5B;AAAA;AAAA;AAAA;AAAA,gBATA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAcD,KAfD,MAeO;AACL,0BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWH;AAAxB;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;AACF;;AA1C2C;;AA6C9C,eAAeP,eAAf","sourcesContent":["import React from \"react\";\nimport \"./CssComponents/ChooseTotalTime.css\";\nimport { Button } from \"semantic-ui-react\";\nimport Timer from './Timer';\nimport { GrCirclePlay } from \"react-icons/gr\";\n\nclass ChooseTotalTime extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      isStarted: false,\n      totalDuration: 0,\n    isPlaying: false };\n    this.trainningTime = this.trainningTime.bind(this);\n  }\n\n  trainningTime = (totalTime) => {\n    this.setState({\n      totalDuration: totalTime * 60 * 1000,\n      isStarted: true})\n  };\n  \n  //reset isStarted to false when completing or stopping training \n  stopTraining = () => {\n    this.setState({isStarted: false,})\n  }\n\n  render() {\n    if(!this.state.isStarted) {\n      return (\n        <div className=\"TimeSelection\">\n          <h1>Select training time (in minutes):</h1>\n          <Button.Group>\n            <Button className=\"yellow\" onClick={() => this.trainningTime(20)}>20</Button>\n            <Button.Or />\n            <Button className=\"orange\" onClick={() => this.trainningTime(30)}>30</Button>\n            <Button.Or />\n            <Button className=\"red\" onClick={() => this.trainningTime(40)}>40</Button>\n          </Button.Group>\n        <button onClick={() => this.stopTraining}></button>\n        </div>\n\n      );    \n    } else {\n      return (\n        <Timer time={this.state.totalDuration} />\n      )\n    }\n  }\n}\n\nexport default ChooseTotalTime;"]},"metadata":{},"sourceType":"module"}